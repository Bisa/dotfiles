
# If not running interactively, don't do anything
tty -s || return

# XDG
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"
export XDG_RUNTIME_DIR="/run/user/$UID"
export BASH_COMPLETION_USER_FILE="$XDG_CONFIG_HOME/bash-completion/bash_completion"
export HISTFILE="$XDG_STATE_HOME/bash/history"
export VIMINIT="set nocp | source ${XDG_CONFIG_HOME:-$HOME/.config}/vim/vimrc"

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b $XDG_CONFIG_HOME/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

alias ll='ls -valsh'
alias la='ls -A'
alias l='ls -CF'

alias ch='chezmoi'
source <(chezmoi completion bash)
complete -o default -F __start_chezmoi ch

alias sbr='clear; exec /bin/bash'
alias vbr='vim $HOME/.bashrc && sbr'

# Alias definitions.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# yubikey
export GPG_TTY="$(tty)"
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
gpgconf --launch gpg-agent

function sail() {
  local sailbin=
  if [ -x "$PWD/sail" ]; then
    sailbin="$PWD/sail"
  elif [ -x "$PWD/vendor/bin/sail" ]; then
    sailbin="$PWD/vendor/bin/sail"
  else
    local gitpath=$(git rev-parse --show-toplevel 2> /dev/null)
    if [ -x "$gitpath/vendor/bin/sail" ]; then
      sailbin="$gitpath/vendor/bin/sail"
    fi
  fi
  [ -z "$sailbin" ] && { >&2 echo "${red}Could not find sail!${reset}"; return 1; }
  "$sailbin" $@ 
}

export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWUPSTREAM=verbose
export GIT_PS1_SHOWCONFLICTSTATE=yes
export GIT_PS1_DESCRIBE_STYLE=branch
export GIT_PS1_SHOWCOLORHINTS=1

#
# general settings
#

export REQUESTS_CA_BUNDLE=/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem

# colors/formatting
export reset=$(tput sgr0)
export bold=$(tput bold)
export black=$(tput setaf 0)
export red=$(tput setaf 1)
export green=$(tput setaf 2)
export yellow=$(tput setaf 3)
export blue=$(tput setaf 4)
export magenta=$(tput setaf 5)
export cyan=$(tput setaf 6)
export white=$(tput setaf 7)

# encrypt sensitive vars
export CRYPTENV="$XDG_CONFIG_HOME/.cryptenv"
source <(cat "$CRYPTENV" |gpg --decrypt)
function cryptedit() {
	local tmp="$(mktemp -p "/var/run/user/$(id -u)")"
	if cat "$CRYPTENV" |gpg --decrypt > "$tmp"; then
		if vim -n "$tmp"; then
			echo "Storing new cryptenv"
			cat "$tmp" |gpg \
				--encrypt \
				--recipient $(gpg --list-secret-key --keyid-format long |grep -oP '/[^ ]+' |grep -v home |head -n1 |tr -d '/') \
				--armor > "$CRYPTENV" && \
				rm "$tmp" && exec /bin/bash
		else
			echo "Aborting cryptedit"
			rm "$tmp"
		fi
	fi
}

#
# helpers/alias
#

alias less='less -#5 -S'
alias vim='vim -p'

# History cleaning
function histdelseq() {
  for h in $(seq $1 $2); do
    history -d $1
  done
  history -d $(history 1 |awk '{print $1}')
}
function histdel() {
  offset=${1:-1}
  n=$(history 1 |awk '{print $1}')
  histdelseq $(( $n - $offset )) $(( $n - 1 ))
}

# TMUX Session switcher
function tm(){
  [ -z "$1" ] && { tmux list-sessions; return; }
  local tmsess=$1; shift

	[ -n "$TMUX" ] && { tmux detach; return; }
  if tmux list-sessions 2>&1| grep -P "^$tmsess" 2>&1 > /dev/null; then
    tmux attach -t "$tmsess"
  else
    tmux new -s "$tmsess"
  fi
}
function __tm_ls(){
  tmux list-sessions |awk -F':' '{ print $1 }'
}
function __tm_comp(){
  if [ "${#COMP_WORDS[@]}" != "2" ]; then
    return
  fi
  sessions="$(__tm_ls)"
  COMPREPLY=($(compgen -W "${sessions}" "${COMP_WORDS[1]}"))
}
complete -F __tm_comp tm

# GITGET
export GITGET_BASE_PATH="$XDG_DATA_HOME/gitget"
mkdir -p "$GITGET_BASE_PATH"
function cdgit() {
	cd "$GITGET_BASE_PATH"/${1:-}
}
function __cdgit_ls(){
	for s in $(ls -A "$GITGET_BASE_PATH"); do
		[ -d "$GITGET_BASE_PATH/$s" ] || continue
		for p in $(ls -A "$GITGET_BASE_PATH/$s"); do
			[ -d "$GITGET_BASE_PATH/$s/$p" ] || continue
			for r in $(ls -A "$GITGET_BASE_PATH/$s/$p"); do
				[ -d "$GITGET_BASE_PATH/$s/$p/$r" ] || continue
				for w in $(ls -A "$GITGET_BASE_PATH/$s/$p/$r"); do
					echo $s/$p/$r/$w
				done
			done
		done
	done
}
function __cdgit_comp(){
  if [ "${#COMP_WORDS[@]}" != "2" ]; then
    return
  fi
  local repos="$(__cdgit_ls)"
  COMPREPLY=($(compgen -W "${repos}" "${COMP_WORDS[1]}"))
}
complete -F __cdgit_comp cdgit

#
#	sourcing
#

sources="/usr/share/bash-completion/bash_completion /etc/bash_completion.d/git /usr/share/git-core/contrib/completion/git-prompt.sh"
for f in $sources; do
  [ -e $f ] && source $f
done

#
# prompt
#
user_format=
user_color=$green
if ! [[ `whoami` =~ ^u[0-9]+$ ]]; then
    user_color=$yellow
fi
[ "$UID" -eq 0 ] && { user_color=$red; user_format=$bold; }

export HISTCONTROL=""
function _pcmd() {
	pLast="${pCurr:-}"
	pCurr=$(history 1 |grep -oP '^ +\K[0-9]+')
	if [ "$pCurr" = "$pLast" ]; then
		echo "### ${blue}DIR${reset}:"
		ll --color=always
		if git status > /dev/null 2>&1; then
			echo
			echo "### ${blue}GIT${reset}:"
			git status -u .
		fi
	fi
}
PROMPT_COMMAND='_pcmd'

function _dir() {
	pwd |rev |cut -d'/' -f1,2 |rev
}

PS1='\[$yellow\][`iret=$?; if [ $iret -eq 0 ]; then echo -n $green; else echo -n $red; fi; echo -n $iret`\[$yellow\]]\[$user_format\]\[$user_color\]\u\[$reset\]@\H \[$blue\]`_dir`\[$reset\]$(__git_ps1 " (%s)")
\[$reset\]\$ '

# clear duplicate PATH
export PATH=$(echo "$PATH"|tr ':' '\n' |uniq |tr '\n' ':' |rev | sed 's/://' |rev)
